# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _pyxxusb
else:
    import _pyxxusb

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



def new_int_p():
    return _pyxxusb.new_int_p()

def copy_int_p(value):
    return _pyxxusb.copy_int_p(value)

def delete_int_p(obj):
    return _pyxxusb.delete_int_p(obj)

def int_p_assign(obj, value):
    return _pyxxusb.int_p_assign(obj, value)

def int_p_value(obj):
    return _pyxxusb.int_p_value(obj)

def new_long_p():
    return _pyxxusb.new_long_p()

def copy_long_p(value):
    return _pyxxusb.copy_long_p(value)

def delete_long_p(obj):
    return _pyxxusb.delete_long_p(obj)

def long_p_assign(obj, value):
    return _pyxxusb.long_p_assign(obj, value)

def long_p_value(obj):
    return _pyxxusb.long_p_value(obj)

def new_char_p():
    return _pyxxusb.new_char_p()

def copy_char_p(value):
    return _pyxxusb.copy_char_p(value)

def delete_char_p(obj):
    return _pyxxusb.delete_char_p(obj)

def char_p_assign(obj, value):
    return _pyxxusb.char_p_assign(obj, value)

def char_p_value(obj):
    return _pyxxusb.char_p_value(obj)

def new_intArray(nelements):
    return _pyxxusb.new_intArray(nelements)

def delete_intArray(ary):
    return _pyxxusb.delete_intArray(ary)

def intArray_getitem(ary, index):
    return _pyxxusb.intArray_getitem(ary, index)

def intArray_setitem(ary, index, value):
    return _pyxxusb.intArray_setitem(ary, index, value)

def new_longArray(nelements):
    return _pyxxusb.new_longArray(nelements)

def delete_longArray(ary):
    return _pyxxusb.delete_longArray(ary)

def longArray_getitem(ary, index):
    return _pyxxusb.longArray_getitem(ary, index)

def longArray_setitem(ary, index, value):
    return _pyxxusb.longArray_setitem(ary, index, value)

def new_shortArray(nelements):
    return _pyxxusb.new_shortArray(nelements)

def delete_shortArray(ary):
    return _pyxxusb.delete_shortArray(ary)

def shortArray_getitem(ary, index):
    return _pyxxusb.shortArray_getitem(ary, index)

def shortArray_setitem(ary, index, value):
    return _pyxxusb.shortArray_setitem(ary, index, value)

def new_charArray(nelements):
    return _pyxxusb.new_charArray(nelements)

def delete_charArray(ary):
    return _pyxxusb.delete_charArray(ary)

def charArray_getitem(ary, index):
    return _pyxxusb.charArray_getitem(ary, index)

def charArray_setitem(ary, index, value):
    return _pyxxusb.charArray_setitem(ary, index, value)

def devices_find():
    return _pyxxusb.devices_find()

def device_open():
    return _pyxxusb.device_open()

def xxusb_bulk_read(hDev, DataBuffer, lDataLen, timeout):
    return _pyxxusb.xxusb_bulk_read(hDev, DataBuffer, lDataLen, timeout)

def xxusb_bulk_write(hDev, DataBuffer, lDataLen, timeout):
    return _pyxxusb.xxusb_bulk_write(hDev, DataBuffer, lDataLen, timeout)

def xxusb_usbfifo_read(hDev, DataBuffer, lDataLen, timeout):
    return _pyxxusb.xxusb_usbfifo_read(hDev, DataBuffer, lDataLen, timeout)

def xxusb_longstack_execute(hDev, DataBuffer, lDataLen, timeout):
    return _pyxxusb.xxusb_longstack_execute(hDev, DataBuffer, lDataLen, timeout)

def xxusb_register_read(hDev, RegAddr, RegData):
    return _pyxxusb.xxusb_register_read(hDev, RegAddr, RegData)

def xxusb_stack_read(hDev, StackAddr, StackData):
    return _pyxxusb.xxusb_stack_read(hDev, StackAddr, StackData)

def xxusb_stack_write(hDev, StackAddr, StackData):
    return _pyxxusb.xxusb_stack_write(hDev, StackAddr, StackData)

def xxusb_stack_execute(hDev, StackData):
    return _pyxxusb.xxusb_stack_execute(hDev, StackData)

def xxusb_register_write(hDev, RegAddr, RegData):
    return _pyxxusb.xxusb_register_write(hDev, RegAddr, RegData)

def xxusb_reset_toggle(hDev):
    return _pyxxusb.xxusb_reset_toggle(hDev)

def xxusb_device_close(hDev):
    return _pyxxusb.xxusb_device_close(hDev)

def xxusb_flash_program(hDev, config, nsect):
    return _pyxxusb.xxusb_flash_program(hDev, config, nsect)

def xxusb_flashblock_program(hDev, config):
    return _pyxxusb.xxusb_flashblock_program(hDev, config)

def xxusb_serial_open(SerialString):
    return _pyxxusb.xxusb_serial_open(SerialString)

def VME_register_write(hdev, VME_Address, Data):
    return _pyxxusb.VME_register_write(hdev, VME_Address, Data)

def VME_register_read(hdev, VME_Address, Data):
    return _pyxxusb.VME_register_read(hdev, VME_Address, Data)

def VME_LED_settings(hdev, LED, code, invert, latch):
    return _pyxxusb.VME_LED_settings(hdev, LED, code, invert, latch)

def VME_DGG(hdev, channel, trigger, output, delay, gate, invert, latch):
    return _pyxxusb.VME_DGG(hdev, channel, trigger, output, delay, gate, invert, latch)

def VME_Output_settings(hdev, Channel, code, invert, latch):
    return _pyxxusb.VME_Output_settings(hdev, Channel, code, invert, latch)

def VME_scaler_settings(hdev, channel, trigger, enable, reset):
    return _pyxxusb.VME_scaler_settings(hdev, channel, trigger, enable, reset)

def VME_read_16(hdev, Address_Modifier, VME_Address, Data):
    return _pyxxusb.VME_read_16(hdev, Address_Modifier, VME_Address, Data)

def VME_read_32(hdev, Address_Modifier, VME_Address, Data):
    return _pyxxusb.VME_read_32(hdev, Address_Modifier, VME_Address, Data)

def VME_BLT_read_32(hdev, Address_Modifier, count, VME_Address, Data):
    return _pyxxusb.VME_BLT_read_32(hdev, Address_Modifier, count, VME_Address, Data)

def VME_write_16(hdev, Address_Modifier, VME_Address, Data):
    return _pyxxusb.VME_write_16(hdev, Address_Modifier, VME_Address, Data)

def VME_write_32(hdev, Address_Modifier, VME_Address, Data):
    return _pyxxusb.VME_write_32(hdev, Address_Modifier, VME_Address, Data)

def CAMAC_DGG(hdev, channel, trigger, output, delay, gate, invert, latch):
    return _pyxxusb.CAMAC_DGG(hdev, channel, trigger, output, delay, gate, invert, latch)

def CAMAC_register_read(hdev, A, Data):
    return _pyxxusb.CAMAC_register_read(hdev, A, Data)

def CAMAC_register_write(hdev, A, Data):
    return _pyxxusb.CAMAC_register_write(hdev, A, Data)

def CAMAC_LED_settings(hdev, LED, code, invert, latch):
    return _pyxxusb.CAMAC_LED_settings(hdev, LED, code, invert, latch)

def CAMAC_Output_settings(hdev, Channel, code, invert, latch):
    return _pyxxusb.CAMAC_Output_settings(hdev, Channel, code, invert, latch)

def CAMAC_read_LAM_mask(hdev, Data):
    return _pyxxusb.CAMAC_read_LAM_mask(hdev, Data)

def CAMAC_write_LAM_mask(hdev, Data):
    return _pyxxusb.CAMAC_write_LAM_mask(hdev, Data)

def CAMAC_scaler_settings(hdev, channel, trigger, enable, reset):
    return _pyxxusb.CAMAC_scaler_settings(hdev, channel, trigger, enable, reset)

def CAMAC_write(hdev, N, A, F, Data, Q, X):
    return _pyxxusb.CAMAC_write(hdev, N, A, F, Data, Q, X)

def CAMAC_read(hdev, N, A, F, Data, Q, X):
    return _pyxxusb.CAMAC_read(hdev, N, A, F, Data, Q, X)

def CAMAC_Z(hdev):
    return _pyxxusb.CAMAC_Z(hdev)

def CAMAC_C(hdev):
    return _pyxxusb.CAMAC_C(hdev)

def CAMAC_I(hdev, inhibit):
    return _pyxxusb.CAMAC_I(hdev, inhibit)

def CAMAC_blockread16(hdev, N, A, F, loops, Data):
    return _pyxxusb.CAMAC_blockread16(hdev, N, A, F, loops, Data)

